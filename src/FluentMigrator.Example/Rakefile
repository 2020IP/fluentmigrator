require 'rubygems'

task :default => [:clean, :compile]

desc 'removes build files'
task :clean do
  FileUtils.rm_rf("build")
end

desc 'compile'
task :compile => :clean do
  msbuild_path = File.join(ENV['windir'].dup, 'Microsoft.NET', 'Framework', 'v3.5', 'msbuild.exe')
  sh "#{msbuild_path} FluentMigrator.Example.sln /maxcpucount /v:m /property:BuildInParallel=false /property:Configuration=debug /property:Architecture=x86 /t:Rebuild"
end


namespace :db do
  desc 'migrates the database'
  task :migrate => [:clean, :compile] do
	FluentMigratorWrapper.execute('migrate', ENV.include?('VERSION') ? ENV['VERSION'] : 0)
  end
  
  namespace :migrate do
    desc 'migrates the database'
	task :down => [:clean, :compile] do
	  FluentMigratorWrapper.execute('migrate:up', ENV.include?('VERSION') ? ENV['VERSION'] : 0)
	end
	
	desc 'migrates the database down for a given VERSION'
	task :down => [:clean, :compile] do
	  FluentMigratorWrapper.execute('migrate:down', ENV.include?('VERSION') ? ENV['VERSION'] : 0)
	end
  end
  
  desc 'rolls back the database a number of STEPS'
  task :rollback => [:clean, :compile] do
    FluentMigratorWrapper.execute('rollback', 0, ENV.include?('STEPS') ? ENV['STEPS'] : 0)
  end
  
  desc 'deletes the sqlite database'
  task :delete do
    File.delete('db.sqlite') if File.exists?('db.sqlite')
  end
end

class FluentMigratorWrapper

  def self.execute(task='migrate', version=0, steps=0)
    command = "tools/FluentMigrator/FluentMigrator.Console.exe /connection \"Data Source=db.sqlite;Version=3;\" /db Sqlite /target  build/FluentMigrator.Example.dll /log /namespace FluentMigrator.Example.Migrations"
	command += " /task #{task}"
	command += " /version #{version}" unless version == 0
	command += " /steps #{steps}" unless steps == 0
    sh command
  end

end
